<system>
  log_level debug
  # log_level error
</system>

# bind fluentd on IP 0.0.0.0
# port 24224
<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<source>
  @type http
  port 9880
  bind 0.0.0.0
  body_size_limit 32m
  keepalive_timeout 10s
</source>

<source>
  @type rabbitmq
  tag span
  host rabbitmq
  # or hosts ["192.168.1.1", "192.168.1.2"]
  port 5672
  user guest
  pass guest
  vhost /
  # exchange rabbitmq-tag # not required. if specified, the queue will be bound to the exchange
  queue span
  # routing_key hoge # if not specified, the tag is used
  heartbeat 10 # integer as seconds or :server (interval specified by server)
  <parse>
    @type json # or msgpack, ltsv, none
  </parse>
</source>

<source>
  @type rabbitmq
  tag log
  host rabbitmq
  port 5672
  user guest
  pass guest
  vhost /
  queue log
  heartbeat 10
  <parse>
    @type json
  </parse>
</source>

# Fluentd will send its own logs to this label.
# This is useful for monitoring Fluentd logs.
<label @FLUENT_LOG>
  <match fluent.*>
    @type stdout
  </match>
</label>

<filter span>
  @type record_transformer
  enable_ruby
  <record>
    # jsonized_record ${record.to_json}
    # tag ${tag}
    spans ${ record["resourceSpans"][0]["scopeSpans"][0]["spans"][0] }
    resourceSpan ${ record["resourceSpans"][0]["resource"] }
  </record>
  remove_keys resourceSpans
</filter>

<filter log>
  @type record_transformer
  enable_ruby
  <record>
    logs ${ record["resourceLogs"][0]["instrumentationLibraryLogs"][0]["logRecords"][0] }
    resourceLog ${ record["resourceLogs"][0]["resource"] }
  </record>
  remove_keys resourceLogs
</filter>

<filter span>
  @type record_transformer
  enable_ruby
  <record>
    uuaaAttr ${ record["spans"]["attributes"].find {|attr| attr["key"] == "UUAA"} }
  </record>
</filter>

<filter log>
  @type record_transformer
  enable_ruby
  <record>
    uuaaAttr ${ record["logs"]["attributes"].find {|attr| attr["key"] == "UUAA"} }
  </record>
</filter>

<filter span>
  @type record_transformer
  enable_ruby
  <record>
    spanId ${ record["spans"]["spanId"] }
    parentSpanId ${ record["spans"]["parentSpanId"] }
    traceId ${ record["spans"]["traceId"] }
    name ${ record["spans"]["name"] }
    startTimeUnixNano ${ record["spans"]["startTimeUnixNano"] }
    endTimeUnixNano ${ record["spans"]["endTimeUnixNano"] }
    status ${ record["spans"]["status"]["code"] }
    kind ${ record["spans"]["kind"] }
    attributes ${ record["spans"]["attributes"].map { |attr| { attr["key"] => attr["value"][attr["value"].keys[0]] } } }
    resources ${ record["resourceSpan"]["attributes"].map { |attr| { attr["key"] => attr["value"][attr["value"].keys[0]] } } }
    uuaa ${ record["uuaaAttr"] ? record["uuaaAttr"]["value"][record["uuaaAttr"]["value"].keys[0]] : "default" }
  </record>
  remove_keys spans,resourceSpan
</filter>

<filter log>
  @type record_transformer
  enable_ruby
  <record>
    spanId ${ record["logs"]["spanId"] }
    traceId ${ record["logs"]["traceId"] }
    timeUnixNano ${ record["logs"]["timeUnixNano"] }
    body ${ record["logs"]["body"][record["logs"]["body"].keys[0]] }
    attributes ${ record["logs"]["attributes"].map { |attr| { attr["key"] => attr["value"][attr["value"].keys[0]] } } }
    resources ${ record["resourceLog"]["attributes"].map { |attr| { attr["key"] => attr["value"][attr["value"].keys[0]] } } }
    uuaa ${ record["uuaaAttr"] ? record["uuaaAttr"]["value"][record["uuaaAttr"]["value"].keys[0]] : "default" }
  </record>
  remove_keys logs,resourceLog
</filter>

<match {span,log}>
  @type rewrite_tag_filter
  <rule>
    key uuaa
    pattern /(.+)/
    tag     ${tag}-$1
  </rule>
</match>

<filter **>
  @type record_transformer
  remove_keys uuaa,uuaaAttr
</filter>


# sendlog to the elasticsearch
# the host must match to the elasticsearch
# container service
<match **>
  @type copy
  <store>
    @type  elasticsearch
    @id    elasticsearch_out
    host elasticsearch
    port 9200
    logstash_format true
    logstash_dateformat %Y%m%d
    logstash_prefix ${tag}
    request_timeout 20s
    include_tag_key true
    tag_key @log_name
    <buffer>
      flush_mode interval
      flush_interval 5s
      retry_wait 5s
      retry_max_interval 60s
    </buffer>
  </store>
  <store>
    @type stdout
  </store>
</match>